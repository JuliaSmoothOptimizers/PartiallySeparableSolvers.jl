var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [PartiallySeparableSolvers]","category":"page"},{"location":"reference/#PartiallySeparableSolvers.alloc_struct_algo-Union{Tuple{T}, Tuple{T, Int64}, Tuple{T, Int64, Any}} where T","page":"Reference","title":"PartiallySeparableSolvers.alloc_struct_algo","text":"alloc_struct_algo(obj, n, type)\n\nAlloc the structure needed for the whole Trust Region algorithm, which include the gradients vectors and Hessian approximations, the vectors to store the points xₖ and xₖ₋₁, some constants Δ, η... and the Partially separable structure of the obj function.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.approx_quad-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableSolvers.struct_algo{T, Y}, AbstractVector{Y}}} where {Y<:Number, T}","page":"Reference","title":"PartiallySeparableSolvers.approx_quad","text":"approx_quad(struct_algo, pₖ   )\n\nreturn the quadratic approximation m(pₖ) = fₖ + gₖᵀpₖ + 1/2.pₖᵀBpₖ. The values of  fₖ, gₖ and Bₖ are stored inside struct_algo.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.compute_ratio-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableSolvers.struct_algo{T, Y}, AbstractVector{Y}}} where {Y<:Number, T}","page":"Reference","title":"PartiallySeparableSolvers.compute_ratio","text":"compute_ratio(struct_algo, sₖ )\n\nCompute the ratio :   (fₖ - fₖ₊₁)/(mₖ(0)-mₖ(sₖ)) , all the data about fₖ, mₖ is stored in struct_algo\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.init_struct_algo!-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableSolvers.struct_algo{T, Y}, AbstractVector{Y}}} where {Y<:Number, T}","page":"Reference","title":"PartiallySeparableSolvers.init_struct_algo!","text":"initstructalgo(structalgo, x ) Once the structure is allocated, we can use initstruct to init the structure struct_algo at the point x, which is the initial point of the algorithm. When the initialisation is done we can start the algorithme.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.other_index-Union{Tuple{PartiallySeparableSolvers.struct_algo{T, Y}}, Tuple{T}, Tuple{Y}} where {Y<:Number, T}","page":"Reference","title":"PartiallySeparableSolvers.other_index","text":"other_index(i)\n\ni ∈ {1,2}. We use a trick to avoid useless copy of gradients and Hessians in the structure of the algorithm. So we need and index  in the structure of the algorithm. The function otherindex return the other index.  The index is an enumerate type.  If the index is currently to 1 (fst) in the structure sa then otherindex(sa) return 2 (snd), and in the other case return 1  (fst)\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.solver_TR_CG_Ab_NLP_LO-Union{Tuple{T}, Tuple{NLPModels.AbstractNLPModel, LinearOperators.AbstractLinearOperator{T}}} where T<:Number","page":"Reference","title":"PartiallySeparableSolvers.solver_TR_CG_Ab_NLP_LO","text":"solver_L_SR1_Ab_NLP(nlp, B, x0)\n\nsolverLSR1AbNLP is a optimisation method using Trust region with conjugate gradient. nlp is an AbstractNLPModel, B is an AbstractLinearOperator and x0 is an AbstractVector reprensenting the initial point of the method. The method return a tuple: with the final point and the number of iteration performming by the method. Even if the name suggest LSR1, B can be a BFGS Operator.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.solver_TR_CG_Ab_NLP_Trunk-Union{Tuple{PartionnedNLPModel{T, Y}}, Tuple{T}, Tuple{Y}} where {Y<:Number, T}","page":"Reference","title":"PartiallySeparableSolvers.solver_TR_CG_Ab_NLP_Trunk","text":"solver_TR_CG_Ab_NLP_Trunk(nlp, B)\n\nsolverLSR1AbNLP is a optimisation method using Trust region with conjugate gradient. nlp is an AbstractNLPModel, B is an AbstractLinearOperator and x0 is an AbstractVector reprensenting the initial point of the method. The method return a tuple: with the final point and the number of iteration performming by the method. Even if the name suggest LSR1, B can be a BFGS Operator.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.solver_TR_PBFGS!-Tuple{T} where T<:NLPModels.AbstractNLPModel","page":"Reference","title":"PartiallySeparableSolvers.solver_TR_PBFGS!","text":"solver_TR_PSR1!(model)\n\nTrust region method using the gradient conjugate method and the Partially Separable Structure of the model from the parameters. This method use BFGS approximation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.update_BFGS!-Union{Tuple{Y}, Tuple{AbstractVector{Y}, AbstractVector{Y}, AbstractMatrix{Y}, AbstractMatrix{Y}}} where Y<:Number","page":"Reference","title":"PartiallySeparableSolvers.update_BFGS!","text":"update_BFGS(Δx, y, B, B_1 )\n\nfunction that builde the next approximation of the Hessian, which will be stored in B_1. Rhe result is based from Δx, y and B; respectively the difference between 2 points, the difference of the gradient of the associate points, and the previous approximation of the Hessian. The approximation is made according to the BFGS update method.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.update_PBFGS!-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableSolvers.struct_algo{T, Y}, LinearOperators.LinearOperator{Y}}} where {Y<:Number, T}","page":"Reference","title":"PartiallySeparableSolvers.update_PBFGS!","text":"update_PBFGS!(struct_algo, B)\n\nThis function perform a step of a Trust-Region method using a conjuguate-gragient method to solve the sub-problem of the Trust-Region. B is the LinearOperator needed by the cg (conjuguate-gragient method). struct_algo stored all the data relative to the problem and is modified if step is taken .\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.update_PBS!-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableSolvers.struct_algo{T, Y}, LinearOperators.LinearOperator{Y}}} where {Y<:Number, T}","page":"Reference","title":"PartiallySeparableSolvers.update_PBS!","text":"update_PBS!(struct_algo, B)\n\nThis function perform a step of a Trust-Region method using a conjuguate-gragient method to solve the sub-problem of the Trust-Region. B is the LinearOperator needed by the cg (conjuguate-gragient method). struct_algo stored all the data relative to the problem and is modified if step is taken .\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.update_PSR1!-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableSolvers.struct_algo{T, Y}, LinearOperators.LinearOperator{Y}}} where {Y<:Number, T}","page":"Reference","title":"PartiallySeparableSolvers.update_PSR1!","text":"update_PSR1!(struct_algo, B)\n\nThis function perform a step of a Trust-Region method using a conjuguate-gragient method to solve the sub-problem of the Trust-Region. B is the LinearOperator needed by the cg (conjuguate-gragient method). struct_algo stored all the data relative to the problem and is modified if step is taken .\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.update_SPS_BFGS!-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableNLPModels.SPS{T}, PartiallySeparableNLPModels.Hess_matrix{Y}, PartiallySeparableNLPModels.Hess_matrix{Y}, PartiallySeparableNLPModels.grad_vector{Y}, AbstractVector{Y}}} where {Y<:Number, T}","page":"Reference","title":"PartiallySeparableSolvers.update_SPS_BFGS!","text":"update_SPS_BFGS(sps, Bₖ, Bₖ₊₁, yₖ, sₖ)\n\nupdate the Hessian approximation Bₖ using the SR1 method, according to the sps partially separable structre. To make the update, we need the gradvector y and the vector s. B, B1 and y use structure linked with the partially separable structure stored in sps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.update_SPS_SR1!-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableNLPModels.SPS{T}, PartiallySeparableNLPModels.Hess_matrix{Y}, PartiallySeparableNLPModels.Hess_matrix{Y}, PartiallySeparableNLPModels.grad_vector{Y}, AbstractVector{Y}}} where {Y<:Number, T}","page":"Reference","title":"PartiallySeparableSolvers.update_SPS_SR1!","text":"update_SPS_SR1(sps, Bₖ, Bₖ₊₁, yₖ, sₖ)\n\nupdate the Hessian approximation Bₖ using the SR1 method, according to the sps partially separable structre. To make the update, we need the gradvector y and the vector s. B, B1 and y use structure linked with the partially separable structure stored in sps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.update_SPS_mix_SR1_BFGS!-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableNLPModels.SPS{T}, PartiallySeparableNLPModels.Hess_matrix{Y}, PartiallySeparableNLPModels.Hess_matrix{Y}, PartiallySeparableNLPModels.grad_vector{Y}, AbstractVector{Y}}} where {Y<:Number, T}","page":"Reference","title":"PartiallySeparableSolvers.update_SPS_mix_SR1_BFGS!","text":"update_SPS_mix_SR1_BFGS(sps, Bₖ, Bₖ₊₁, yₖ, sₖ)\n\nThe update is based on the gradvector y and the vector s. B, B1 and y use structure linked with the partially separable structure stored in sps. We update the Hessian approximation Bₖ according with partially separable structure. We update each Bᵢₖ,if it is convex we use BFGS rather than SR1.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.update_SR1!-Union{Tuple{Y}, Tuple{AbstractVector{Y}, AbstractVector{Y}, AbstractMatrix{Y}, AbstractMatrix{Y}}} where Y<:Number","page":"Reference","title":"PartiallySeparableSolvers.update_SR1!","text":"update_BFGS(Δx, y, B, B_1 )\n\nfunction that builde the next approximation of the Hessian, which will be stored in B_1. The result is based from Δx, y and B; respectively the difference between 2 points, the difference of the gradient of the associate points, and the previous approximation of the Hessian. The approximation is made according to the SR1 update method.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.upgrade_TR_LO!-Union{Tuple{T}, Tuple{Float64, AbstractVector{T}, AbstractVector{T}, AbstractVector{T}, AbstractVector{T}, LinearOperators.AbstractLinearOperator{T}, NLPModels.AbstractNLPModel, Float64}} where T<:Number","page":"Reference","title":"PartiallySeparableSolvers.upgrade_TR_LO!","text":"upgrade_TR_LO(ρₖ, xₖ , sₖ, gₖ, Bₖ, nlp, Δ)\n\nUpdate the LinearOperator Bₖ using the push! if the ratio ρₖ is accepted by computing xₖ₊₁ = xₖ + sₖ and gₖ₊₁ from xₖ₊₁. Update the radius of the Trust region Δ.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartiallySeparableSolvers.upgrade_TR_LO_no_update!-Union{Tuple{T}, Tuple{Y}, Tuple{Float64, AbstractVector{Y}, AbstractVector{Y}, AbstractVector{Y}, PartionnedNLPModel{T, Y}, Float64}} where {Y<:Number, T}","page":"Reference","title":"PartiallySeparableSolvers.upgrade_TR_LO_no_update!","text":"upgrade_TR_LO(ρₖ, xₖ , sₖ, gₖ, Bₖ, nlp, Δ)\n\nUpdate the LinearOperator Bₖ using the push! if the ratio ρₖ is accepted by computing xₖ₊₁ = xₖ + sₖ and gₖ₊₁ from xₖ₊₁. Update the radius of the Trust region Δ.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableSolvers.jl","page":"Home","title":"PartiallySeparableSolvers.jl","text":"","category":"section"},{"location":"tutorial/#PartiallySeparableSolvers.jl-Tutorial","page":"Tutorial","title":"PartiallySeparableSolvers.jl Tutorial","text":"","category":"section"}]
}
